/*
 * Copyright 2010-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package com.amazonaws.demo.personalfilestore;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesUtil;

public class GoogleLogin extends AlertActivity {

    private static final String LOG_TAG = "GOOGLE_LOGIN";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(LOG_TAG, "onCreate");
        getAndUseAuthTokenInAsyncTask();
    }

    void getAndUseAuthTokenBlocking() {
        try {
            int result = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext());
            if (result != ConnectionResult.SUCCESS) {
                throw new Exception("Google Play is not available, make sure you are not running in an emulator",
                        new GooglePlayServicesNotAvailableException(result));
            }

            AccountManager am = AccountManager.get(this);
            Account[] accounts = am.getAccountsByType(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
            Log.d(LOG_TAG, "Found " + accounts.length + " accounts");
            Log.d(LOG_TAG, "Using " + accounts[0].name);

            String token = GoogleAuthUtil.getToken(getApplicationContext(), accounts[0].name,
                    "audience:server:client_id:" + S3PersonalFileStore.clientManager.getGoogleClientID());

            S3PersonalFileStore.clientManager.login(new GoogleIDP(getApplicationContext(), token), this);
        } catch (Exception e) {
            alertUser(e);
        }
    }

    void getAndUseAuthTokenInAsyncTask() {
        AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                getAndUseAuthTokenBlocking();
                return null;
            }
        };
        task.execute();
    }

    protected class GoogleIDP implements WIFIdentityProvider {
        private Context googleContext;
        private String googleToken;

        public GoogleIDP(Context context, String token) {
            googleContext = context;
            googleToken = token;
        }

        @Override
        public String getToken() {
            return googleToken;
        }

        @Override
        public String getProviderID() {
            // google uses a null provider ID
            return null;
        }

        @Override
        public String getRoleARN() {
            return S3PersonalFileStore.clientManager.getGoogleRoleARN();
        }

        @Override
        public void logout() {
            GoogleAuthUtil.invalidateToken(googleContext, googleToken);
        }

    }
}
